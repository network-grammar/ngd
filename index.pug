doctype html
html
  head
    meta(http-equiv='Content-Type', content='text/html; charset=UTF-8')
    title NGD: Network Grammar Demonstator

    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css')
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css')

    script(src='https://code.jquery.com/jquery-3.1.1.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js',defer)

    script(src='https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.css')
      
    script(src='https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.2/require.min.js')
    script(src='ngd-parser.js')
      
    style(type='text/css').
      #mynetwork {
      width: 100%;
      height: 500px;
      }
  body

    .container
      div
        h1 NGD  
          small Network Grammar Demonstrator
        p.text-muted
          em John J. Camilleri

        //- Nav tabs
        ul.nav.nav-tabs(role='tablist')
          li.active(role='presentation')
            a(href='#parse', aria-controls='parse', role='tab', data-toggle='tab') Parse
          li(role='presentation')
            a(href='#data', aria-controls='data', role='tab', data-toggle='tab') Data
        //- Tab panes
        .tab-content
          #parse.tab-pane.active(role='tabpanel')
            .row
              .col-sm-6
                #mynetwork
              .col-sm-6
                h3 Input
                form
                  .form-group
                    label(for='inputPhrase') Input phrase
                    input#inputPhrase.form-control(type='text', placeholder='John kiss ed Lucy')
                  button.btn.btn-primary(type="submit") Parse
                h3 Output
                pre#output

          #data.tab-pane(role='tabpanel')
            h3 Nodes
            p ...
            h3 Links
            p ...

    //- RequireJS
    script(type='text/javascript').
      require(['DataLayerSync'], function(DB) {
        console.log(DB.nodes)
      })
      //- require(['lib/text.min!data/nodes.json','lib/text.min!data/links.json'], function(nodes,links) {
      //-   console.log(nodes)
      //-   console.log(links)
      //- })
      
    //- Visualisation
    script(type='text/javascript').
      var nodes = [
        {id: 'P1', label: 'P1'},
        {id: 'P2', label: 'P2'},
        {id: 'C1', label: 'C1'},
        {id: 'C2', label: 'C2'},
        {id: 'M1', label: 'M1'},
        {id: 'M2', label: 'M2'},
        {id: 'R', label: 'R'}
      ]
      var edges = [
        {from: 'P1', to: 'M1', arrows:'to'},
        {from: 'P2', to: 'M2', arrows:'to'},
        {from: 'C1', to: 'C2', arrows:'to'},
        {from: 'P1', to: 'C1'},
        {from: 'C1', to: 'M1'},
        {from: 'P2', to: 'C2'},
        {from: 'C2', to: 'M2'},
        {from: 'R', to: 'M1'},
        {from: 'R', to: 'M2'},
        {from: 'R', to: 'C1'},
        {from: 'R', to: 'C2'},
        {from: 'M1', to: 'M2'}
      ]
      // create a network
      var container = document.getElementById('mynetwork')
      var data = {
        nodes: nodes,
        edges: edges
      }
      var options = {
      }
      var network = new vis.Network(container, data, options)
